{"version":3,"file":"static/js/946.616d7d9f.chunk.js","mappings":"+JAEA,MAAMA,GAAaC,EAAAA,EAAAA,eAAc,MACpBC,EAAgBA,KAAMC,EAAAA,EAAAA,YAAWH,GAEjCI,EAAqBJ,EAAWK,SAC7C,G,+JCQAC,EAAAA,KAAKC,QAAQC,UACX,+DAEF,MAAMC,EAA2BA,KAC/B,MAAM,gBAAEC,IAAoBC,EAAAA,EAAAA,MACtBC,GAAMC,EAAAA,EAAAA,MAgBZ,OAfAC,EAAAA,EAAAA,GAAiB,aAAcC,IAA+B,IAA5BC,QAAQ,IAAEC,EAAG,IAAEC,IAAOH,EAGtDI,QAAQC,IAAI,6CAEZ,IAEER,EAAIS,MAAM,CAACJ,EAAKC,GAAM,GAAI,CAAEI,SAAU,GAAKC,cAAe,GAC5D,CAAE,MAAOC,GACPL,QAAQM,MAAMD,GACdd,EAAgB,mDAAoD,CAClEgB,QAAS,SAEb,IAEK,MAGHC,EAAgBC,IAAA,IAAEC,EAAGC,EAAGN,EAAGO,GAAEH,EAAA,MAAK,CAGtC,CAACE,EAAGD,GACJ,CAACE,EAAGP,KAGAQ,EAAgBC,IAAA,IAAC,IAAEhB,EAAG,IAAEiB,GAAKD,EAAA,OAAKE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,SAAU,CAACpB,EAAKiB,MA+BhE,EA7BmBI,IAAmB,IAAlB,SAAEC,GAAUD,EAE9B,OADAnB,QAAQC,IAAI,uBAEVe,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,CAAAD,UACEE,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CACXC,OAAQhB,EAAciB,EAAAA,GACtBC,MAAO,CAAEC,OAAQ,OAAQC,gBAAiB,WAC1CC,SAAU,GACVC,UAAW,GAAIV,SAAA,EAEfJ,EAAAA,EAAAA,KAAC1B,EAAwB,KACzB0B,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACRC,YAAY,uOACZC,IAAI,yEACJC,WAAW,OACXC,QAAS,EACTC,QAAS,GACTC,IAAI,SAENrB,EAAAA,EAAAA,KAACnC,EAAAA,GAAWK,SAAQ,CAACoD,MAAO,CAAErB,OAAQJ,GAAgBO,SACnDA,S,kCCjEX,MASaK,EAJmBc,OAAOC,OALjB,CACpBC,GAAI,CAAC,YAAa,UAAW,YAAa,WAC1CC,GAAI,CAAC,YAAa,UAAW,YAAa,aAOAC,OAC1C,CAAA/C,EAAAa,KAAA,IAAEmC,EAAIC,EAAIC,EAAIC,GAAGnD,GAAGoD,EAAIC,EAAIC,EAAIC,GAAG1C,EAAA,MAAM,CACvC2C,KAAKC,IAAIT,EAAII,GACbI,KAAKC,IAAIR,EAAII,GACbG,KAAKE,IAAIR,EAAII,GACbE,KAAKE,IAAIP,EAAII,K","sources":["components/Map/context.js","components/Map/LeafletMap.jsx","data/bounds.js"],"sourcesContent":["import { createContext, useContext } from 'react';\n\nconst MapContext = createContext(null);\nexport const useMapContext = () => useContext(MapContext);\n\nexport const MapContextProvider = MapContext.Provider;\nexport default MapContext;","import {\n  MapContainer,\n  // Rectangle,\n  TileLayer,\n  Marker,\n  useMap\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { Icon } from \"leaflet\";\nimport useEventListener from \"@use-it/event-listener\";\nimport { useSnackbar } from \"notistack\";\nimport { totalBounds } from \"../../data/bounds\";\nimport MapContext from \"./context\";\n// Have to override these url's so that it finds the bundles the correct images\nIcon.Default.imagePath =\n  \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.3/images/\";\n\nconst MapSnappingEventListener = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const map = useMap();\n  useEventListener(\"map.snapTo\", ({ detail: { lat, lng } }) => {\n    // This hook sets up an event listener for the map.snapTo event which\n    // is currently dispatched be an onClick function in CinemaListItem\n    console.log(\"executing `map.snapTo` event with leaflet\");\n\n    try {\n      // [Docs](https://leafletjs.com/reference.html#map-flyto)\n      map.flyTo([lat, lng], 14, { duration: 0.5, easeLinearity: 1 });\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(\"Unexpected error while attempting map navigation\", {\n        variant: \"error\"\n      });\n    }\n  });\n  return null;\n};\n\nconst convertBounds = ([w, s, e, n]) => [\n  // Leaflet expects boundings boxes to be an array consisting of the corners of the box.\n  // These corners are [lat, lon] [LatLng docs](https://leafletjs.com/reference.html#latlng)\n  [s, w],\n  [n, e]\n];\n\nconst LeafletMarker = ({ lat, lon }) => <Marker position={[lat, lon]} />;\n\nconst LeafletMap = ({ children }) => {\n  console.log(\"render Leaflet map\");\n  return (\n    <>\n      <MapContainer\n        bounds={convertBounds(totalBounds)}\n        style={{ height: \"100%\", backgroundColor: \"#99b3cc\" }}\n        zoomSnap={0.5}\n        zoomDelta={0.5}\n      >\n        <MapSnappingEventListener />\n        <TileLayer\n          attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.{ext}\"\n          subdomains=\"abcd\"\n          minZoom={0}\n          maxZoom={18}\n          ext=\"png\"\n        />\n        <MapContext.Provider value={{ Marker: LeafletMarker }}>\n          {children}\n        </MapContext.Provider>\n        {/* {[...allCountryBounds, totalBounds].map((bounds, idx) => (\n          <Rectangle bounds={convertBounds(bounds)} key={idx} />\n        ))} */}\n      </MapContainer>\n    </>\n  );\n};\nexport default LeafletMap;\n","// Country bounds drawn via http://bboxfinder.com/\n// they are currently in the follow format [W, S, E, N]\nconst countryBounds = {\n  au: [112.669086, -43.696673, 153.726368, -10.737187],\n  nz: [166.332922, -47.292562, 178.573837, -34.394162],\n}\n// 166.509144322, -46.641235447, 178.517093541, -34.4506617165\nexport const allCountryBounds = Object.values(countryBounds);\n// latitude is West (-) to East (+)\n// longitude is North (+) to South (-)\n\nexport const totalBounds = allCountryBounds.reduce(\n  ([w1, s1, e1, n1], [w2, s2, e2, n2]) => ([\n    Math.min(w1, w2),\n    Math.min(s1, s2),\n    Math.max(e1, e2),\n    Math.max(n1, n2),\n  ])\n)"],"names":["MapContext","createContext","useMapContext","useContext","MapContextProvider","Provider","Icon","Default","imagePath","MapSnappingEventListener","enqueueSnackbar","useSnackbar","map","useMap","useEventListener","_ref","detail","lat","lng","console","log","flyTo","duration","easeLinearity","e","error","variant","convertBounds","_ref2","w","s","n","LeafletMarker","_ref3","lon","_jsx","Marker","position","_ref4","children","_Fragment","_jsxs","MapContainer","bounds","totalBounds","style","height","backgroundColor","zoomSnap","zoomDelta","TileLayer","attribution","url","subdomains","minZoom","maxZoom","ext","value","Object","values","au","nz","reduce","w1","s1","e1","n1","w2","s2","e2","n2","Math","min","max"],"sourceRoot":""}