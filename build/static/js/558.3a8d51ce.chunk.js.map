{"version":3,"file":"static/js/558.3a8d51ce.chunk.js","mappings":"+JAEA,MAAMA,GAAaC,EAAAA,EAAAA,eAAc,MACpBC,EAAgBA,KAAMC,EAAAA,EAAAA,YAAWH,GAEjCI,EAAqBJ,EAAWK,SAC7C,G,gFCHA,MAWA,EAX4BC,KAC1B,MAAM,OAAEC,IAAWL,EAAAA,EAAAA,OACb,QAAEM,IAAYC,EAAAA,EAAAA,KAEpB,OAAOD,EAAQE,IAAI,CAACC,EAAQC,KAExBC,EAAAA,EAAAA,KAACN,EAAM,CAACO,IAAKH,EAAOG,IAAKC,IAAKJ,EAAOK,KAAUJ,I,kGCArD,MAAMK,E,QAAoBC,EAAWR,IAAKC,IAAMQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC3CR,GAAM,IACTS,KAAKC,EAAAA,EAAAA,IAAM,CAACV,EAAOK,IAAKL,EAAOG,SAG3BQ,GAAwBC,EAAAA,EAAAA,SAAQ,CAACT,EAAKE,KAE1C,MAAMQ,GAAWH,EAAAA,EAAAA,IAAM,CAACL,EAAKF,IAI7B,OAAOW,EAAAA,EAAAA,QACLR,EAAkBP,IAAKC,IAAMQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACxBR,GAAM,IACTe,UAAUA,EAAAA,EAAAA,GAASF,EAAUb,EAAOS,QAEtC,cAsCJ,EAlCyBX,KAEvB,MAAM,OACJkB,EAAM,YACNC,EAAW,uBACXC,EAAsB,qBACtBC,IACEC,EAAAA,EAAAA,MACJC,EAAAA,EAAAA,WAAU,KACHF,GACHF,KAID,IAEH,MAAMpB,GAAUyB,EAAAA,EAAAA,SAAQ,IACjBN,EAGEL,EAAsBK,EAAOO,SAAUP,EAAOQ,WAAWC,MAC9D,EACA,IALkB,GAOnB,CAACT,IAGJ,MAAO,CACLE,yBACAC,uBACAH,SACAnB,W","sources":["components/Map/context.js","components/NearbyCinemaMarkers.jsx","data/nearbyCinemas.js"],"sourcesContent":["import { createContext, useContext } from 'react';\n\nconst MapContext = createContext(null);\nexport const useMapContext = () => useContext(MapContext);\n\nexport const MapContextProvider = MapContext.Provider;\nexport default MapContext;","import useNearbyCinemas from \"../data/nearbyCinemas\";\nimport { useMapContext } from './Map/context';\n\nconst NearbyCinemaMarkers = () => {\n  const { Marker } = useMapContext();\n  const { cinemas } = useNearbyCinemas();\n\n  return cinemas.map((cinema, idx) => {\n    return (\n      <Marker lat={cinema.lat} lon={cinema.lng} key={idx} />\n    )\n  })\n};\n\nexport default NearbyCinemaMarkers;","import { useEffect, useMemo } from \"react\";\nimport { useGeolocated } from \"react-geolocated\";\nimport { point } from \"@turf/helpers\";\nimport distance from \"@turf/distance\";\nimport { sortBy, memoize } from \"lodash\";\nimport allCinemas from \"./cinemas\";\n\n// Manually add a point to each cinema this is to be used during comparisons later\n// and will prevent this point needing to be regenerated every time we're recompute & sorting cinemas.\nconst cinemasWithPoints = allCinemas.map((cinema) => ({\n  ...cinema,\n  loc: point([cinema.lng, cinema.lat])\n}));\n\nconst computeCinemaDistance = memoize((lat, lng) => {\n  // Create this point to use later for the same reason as above.\n  const location = point([lng, lat]);\n\n  // Compute and add distance between point above and the cinema's point\n  // then sortBy distance\n  return sortBy(\n    cinemasWithPoints.map((cinema) => ({\n      ...cinema,\n      distance: distance(location, cinema.loc)\n    })),\n    \"distance\"\n  );\n});\n\nconst useNearbyCinemas = () => {\n  // Use library's hook to get coords of location\n  const {\n    coords,\n    getPosition,\n    isGeolocationAvailable,\n    isGeolocationEnabled\n  } = useGeolocated();\n  useEffect(() => {\n    if (!isGeolocationEnabled) {\n      getPosition();\n    }\n    // Disabling eslint's warning as we want this to only occur onMount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const cinemas = useMemo(() => {\n    if (!coords) return [];\n\n    // when we have coords, find nearest 15 cinemas\n    return computeCinemaDistance(coords.latitude, coords.longitude).slice(\n      0,\n      15\n    );\n  }, [coords]);\n\n  // return status of location api lookup and list of cinemas\n  return {\n    isGeolocationAvailable,\n    isGeolocationEnabled,\n    coords,\n    cinemas\n  };\n};\nexport default useNearbyCinemas;\n"],"names":["MapContext","createContext","useMapContext","useContext","MapContextProvider","Provider","NearbyCinemaMarkers","Marker","cinemas","useNearbyCinemas","map","cinema","idx","_jsx","lat","lon","lng","cinemasWithPoints","allCinemas","_objectSpread","loc","point","computeCinemaDistance","memoize","location","sortBy","distance","coords","getPosition","isGeolocationAvailable","isGeolocationEnabled","useGeolocated","useEffect","useMemo","latitude","longitude","slice"],"sourceRoot":""}