{"version":3,"file":"static/js/55.af9f85c6.chunk.js","mappings":"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","sources":["components/CinemaList/FranchiseHeader.jsx","components/CinemaList/FranchiseCinemasList.jsx","components/CinemaList/CinemaListItem.jsx","components/CinemaList/BaseCinemaList.jsx"],"sourcesContent":["import { IconButton, ListSubheader, Typography, Stack } from \"@mui/material\";\nimport { GiAustralia, GiFern } from \"react-icons/gi\";\nimport { MdOutlineArrowBack } from 'react-icons/md';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useParams } from \"react-router-dom\";\nimport franchises from \"../../data/franchises\";\n\nconst FranchiseHeader = () => {\n  const { franchiseId, countryCode } = useParams();\n  const franchise = franchises[franchiseId];\n\n  return (\n    <ListSubheader sx={{ pb: 2 }}>\n      <Stack direction=\"row\" justifyContent=\"space-between\">\n        <IconButton component={RouterLink} to=\"/\">\n          <MdOutlineArrowBack />\n        </IconButton>\n        {franchise?.logoUrl ? (<div style={{ height: '3em' }}>\n          <img src={franchise?.logoUrl} alt={`${franchise.identifier} logo`} height=\"100%\" />\n        </div>) : (\n          <Typography sx={{ alignSelf: 'center' }}>\n            {franchiseId === 'all-cinemas' ? 'All Cinemas' : (franchise?.name || franchise?.identifier || franchise?.id)}\n          </Typography>\n        )}\n        <IconButton disabled>\n          {countryCode === 'au' && <GiAustralia />}\n          {countryCode === 'nz' && <GiFern />}\n        </IconButton>\n      </Stack>\n    </ListSubheader>\n  )\n}\nexport default FranchiseHeader;","import BaseCinemaList from \"./BaseCinemaList\";\nimport FranchiseHeader from \"./FranchiseHeader\";\nimport { useMemo } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport allCinemas from \"../../data/cinemas\";\n\nconst FranchiseCinemasList = () => {\n  const { franchiseId, countryCode } = useParams();\n  const filteredCinemas = useMemo(() => {\n    return allCinemas.filter(cinema => (\n      franchiseId === 'all-cinemas' ||\n      cinema.franchise === franchiseId\n    ) && cinema.countryCode === countryCode);\n  }, [franchiseId, countryCode])\n\n  return (\n    <BaseCinemaList cinemas={filteredCinemas} Header={FranchiseHeader} />\n  );\n};\nexport default FranchiseCinemasList;","import { Chip, IconButton, ListItem, ListItemText } from \"@mui/material\";\nimport { MdCall, MdOutlineLocationOn } from 'react-icons/md';\nimport { format } from 'd3-format';\n\nconst dispatchMapSnapTo = (lat, lng) => {\n  // This will dispatch the `map.snapTo` event which will trigger a listener on the\n  // respective active map component to zoom to the latitude and longitude passed\n  console.log('triggering `map.snapTo` event with args: ', `lat: ${lat}, lng: ${lng}`)\n  dispatchEvent(new CustomEvent('map.snapTo', { detail: { lat, lng } }))\n}\n\nconst CinemaListItem = ({ name, lat, lng, phoneNumber, distance, ...otherProps }) => {\n  return (\n    <ListItem>\n      <ListItemText>\n        {name}\n        {distance && (<Chip size=\"small\" sx={{ ml: 1 }} label={`${format(',.1f')(distance)} km`} />)}\n      </ListItemText>\n      {\n        phoneNumber && (\n          <IconButton component='a' href={`tel:${phoneNumber}`}>\n            <MdCall />\n          </IconButton>\n        )\n      }\n      <IconButton onClick={() => dispatchMapSnapTo(lat, lng)}>\n        <MdOutlineLocationOn />\n      </IconButton>\n    </ListItem>\n  );\n};\nexport default CinemaListItem;","import { List, Divider } from \"@mui/material\";\nimport CinemaListItem from './CinemaListItem';\n\nconst CinemaListAside = ({ cinemas, Header = null }) => {\n  return (\n    <List sx={{ maxHeight: 'calc(100vh - 112px)', overflowY: 'auto' }}>\n      <Header {...{ cinemas }} />\n      {Header && <Divider />}\n      {/* NOTE: potential future feature of adding frontend sorting */}\n      {/* NOTE: this currently doesn't handle the case of cinemas array being empty\n                (poential caused by manually manipulated url arguments) */}\n      {cinemas.map((cinema, idx) => (\n        <CinemaListItem {...cinema} key={idx} />\n      ))}\n    </List>\n  )\n}\nexport default CinemaListAside;"],"names":["FranchiseHeader","franchiseId","countryCode","useParams","franchise","franchises","_jsx","ListSubheader","sx","pb","children","_jsxs","Stack","direction","justifyContent","IconButton","component","RouterLink","to","MdOutlineArrowBack","logoUrl","style","height","src","alt","concat","identifier","Typography","alignSelf","name","id","disabled","GiAustralia","GiFern","FranchiseCinemasList","filteredCinemas","useMemo","allCinemas","filter","cinema","BaseCinemaList","cinemas","Header","_ref","lat","lng","phoneNumber","distance","_objectWithoutProperties","_excluded","ListItem","ListItemText","Chip","size","ml","label","format","href","MdCall","onClick","dispatchMapSnapTo","console","log","dispatchEvent","CustomEvent","detail","MdOutlineLocationOn","List","maxHeight","overflowY","Divider","map","idx","_createElement","CinemaListItem","_objectSpread","key"],"sourceRoot":""}